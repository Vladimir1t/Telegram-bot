import sqlite3
import asyncio
from telethon import TelegramClient
from telethon.errors import RPCError, UsernameInvalidError
from telethon.tl.functions.channels import GetFullChannelRequest
from typing import Optional, Tuple
from telethon.errors import RPCError, FloodWaitError
import threading
import time
import random
import os
from datetime import datetime, timedelta

from database_data import data

API_ID = 23018155
API_HASH = '59054196d2bcd74bbd30b4415f66bfd2'
SESSION_NAME = 'session_1'
BOT_TOKEN = ""
DB_NAME = 'aggregator.db'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
_request_lock = threading.Lock()
_last_request_time = 0
_flood_wait_times = {}

def _run_in_thread(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –Ω–æ–≤—ã–º event loop"""
    result = None
    def run():
        nonlocal result
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(coro)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
            result = (None, None, 0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –≤–º–µ—Å—Ç–æ None
        finally:
            loop.close()
    
    thread = threading.Thread(target=run)
    thread.start()
    thread.join()
    return result

def should_skip_due_to_flood_wait(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑-–∑–∞ flood wait"""
    if username in _flood_wait_times:
        wait_until = _flood_wait_times[username]
        if datetime.now() < wait_until:
            remaining = (wait_until - datetime.now()).total_seconds()
            print(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {username} –∏–∑-–∑–∞ flood wait, –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} —Å–µ–∫")
            return True
        else:
            # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            del _flood_wait_times[username]
    return False

async def _get_avatar_bytes_with_client(username: str, client: TelegramClient) -> Optional[bytes]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –∫–∞–Ω–∞–ª–∞"""
    try:
        entity = await client.get_entity(username)
        avatar = await client.download_profile_photo(entity, file=bytes)
        print(f"‚úì –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—É—á–µ–Ω –¥–ª—è {username}")
        return avatar
    except FloodWaitError as e:
        print(f"‚è≥ Flood wait –¥–ª—è {username}: {e.seconds} —Å–µ–∫—É–Ω–¥")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
        wait_until = datetime.now() + timedelta(seconds=e.seconds + 60)  # +60 —Å–µ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        _flood_wait_times[username] = wait_until
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è {username}: {e}")
        return None

async def get_channel_name_with_client(username: str, client: TelegramClient) -> Optional[str]:
    try:
        entity = await client.get_entity(username)
        name = entity.title if hasattr(entity, "title") else entity.username
        print(f"‚úì –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è {username}: {name}")
        return name
    except FloodWaitError as e:
        print(f"‚è≥ Flood wait –¥–ª—è {username}: {e.seconds} —Å–µ–∫—É–Ω–¥")
        wait_until = datetime.now() + timedelta(seconds=e.seconds + 60)
        _flood_wait_times[username] = wait_until
        return username  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º username –∫–∞–∫ fallback
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è {username}: {e}")
        return username

async def get_subscribers_count_with_client(username: str, client: TelegramClient) -> int:
    try:
        entity = await client.get_entity(username)
        full = await client(GetFullChannelRequest(channel=entity))
        count = full.full_chat.participants_count
        print(f"‚úì –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {username}: {count}")
        return count
    except FloodWaitError as e:
        print(f"‚è≥ Flood wait –¥–ª—è {username}: {e.seconds} —Å–µ–∫—É–Ω–¥")
        wait_until = datetime.now() + timedelta(seconds=e.seconds + 60)
        _flood_wait_times[username] = wait_until
        return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {username}: {e}")
        return 0

def get_telegram_data_sync(username: str) -> Tuple[Optional[bytes], Optional[str], int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑-–∑–∞ flood wait
    if should_skip_due_to_flood_wait(username):
        return None, username, 0
    
    async def get_all_data():
        global _last_request_time
        
        with _request_lock:
            current_time = time.time()
            if _last_request_time > 0:
                time_to_wait = max(0, 7 - (current_time - _last_request_time))
                if time_to_wait > 0:
                    print(f"‚è∏Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ {time_to_wait:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º {username}")
                    await asyncio.sleep(time_to_wait)
            
            _last_request_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        
        try:
            await client.start(bot_token=BOT_TOKEN)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            avatar_bytes = await _get_avatar_bytes_with_client(username, client)
            channel_name = await get_channel_name_with_client(username, client)
            subscribers = await get_subscribers_count_with_client(username, client)
            
            return avatar_bytes, channel_name, subscribers
            
        except FloodWaitError as e:
            print(f"‚è≥ –°–µ—Ä—å–µ–∑–Ω—ã–π Flood wait –¥–ª—è {username}: {e.seconds} —Å–µ–∫—É–Ω–¥")
            wait_until = datetime.now() + timedelta(seconds=e.seconds + 60)
            _flood_wait_times[username] = wait_until
            return None, username, 0
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {username}: {e}")
            return None, username, 0
            
        finally:
            try:
                if client.is_connected():
                    await client.disconnect()
            except:
                pass
    
    return _run_in_thread(get_all_data())

def add_new_chanels(db_path: str = DB_NAME):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM projects")
    count = cursor.fetchone()[0]
       
    if not data:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(data)} –∫–∞–Ω–∞–ª–æ–≤...")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API")
    
    successful = 0
    skipped = 0
    
    for i, item in enumerate(data, 1):
        username = item[1]
        print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {i}/{len(data)}: {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        result = get_telegram_data_sync(username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
        if result is None:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {username}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped += 1
            continue
            
        avatar_bytes, channel_name, subscribers = result
        
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ flood wait
        if username in _flood_wait_times:
            print(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É {username} –∏–∑-–∑–∞ flood wait")
            skipped += 1
            continue
        
        if not channel_name:
            channel_name = username
        
        cursor.execute('''
            INSERT INTO projects 
            (type, name, link, theme, is_premium, likes, subscribers, user_id, icon)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            item[0], 
            channel_name,
            f"https://t.me/{username}",
            item[2],
            0,
            0, 
            subscribers,
            0,
            avatar_bytes
        ))
        
        conn.commit()
        successful += 1
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {i}/{len(data)} - {channel_name}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ: {successful}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        
        if i < len(data):
            delay = random.uniform(1, 3)
            print(f"‚è∏Ô∏è  –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º")
            time.sleep(delay)


def init_db(db_path: str = DB_NAME):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT NOT NULL,
            name TEXT,
            link TEXT NOT NULL,
            theme TEXT NOT NULL,
            is_premium BOOLEAN DEFAULT 0,
            likes INTEGER DEFAULT 0,
            subscribers INTEGER DEFAULT 0,
            user_id INTEGER DEFAULT 1,
            icon BLOB
        )''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            stars INTEGER DEFAULT 0,
            balance REAL DEFAULT 0
        )''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            user_id INTEGER,
            task_type TEXT,
            completed BOOLEAN DEFAULT 0,
            PRIMARY KEY (user_id, task_type)
        )''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏
        cursor.execute("SELECT COUNT(*) FROM projects")
        count = cursor.fetchone()[0]
        
        if count == 0:
        
            if not data:
                print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return
            
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(data)} –∫–∞–Ω–∞–ª–æ–≤...")
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API")
            
            successful = 0
            skipped = 0
            
            for i, item in enumerate(data, 1):
                username = item[1]
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª {i}/{len(data)}: {username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                result = get_telegram_data_sync(username)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
                if result is None:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {username}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped += 1
                    continue
                    
                avatar_bytes, channel_name, subscribers = result
                
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ flood wait
                if username in _flood_wait_times:
                    print(f"‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É {username} –∏–∑-–∑–∞ flood wait")
                    skipped += 1
                    continue
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º username
                if not channel_name:
                    channel_name = username
                
                cursor.execute('''
                    INSERT INTO projects 
                    (type, name, link, theme, is_premium, likes, subscribers, user_id, icon)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    item[0], 
                    channel_name,
                    f"https://t.me/{username}",
                    item[2],
                    0,
                    0, 
                    subscribers,
                    0,
                    avatar_bytes
                ))
                
                conn.commit()
                successful += 1
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {i}/{len(data)} - {channel_name}")
                print(f"üìà –£—Å–ø–µ—à–Ω–æ: {successful}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –¥–æ 15-30 —Å–µ–∫—É–Ω–¥
                if i < len(data):
                    delay = random.uniform(2, 3)
                    print(f"‚è∏Ô∏è  –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {delay:.1f} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º")
                    time.sleep(delay)
        
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if 'conn' in locals():
            conn.close()
        print("üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # init_db()
    add_new_chanels()