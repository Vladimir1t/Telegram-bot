import logging
import asyncio 
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import Database
import keyboards as kb
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7444573816:AAFAU2EckrSQE_rQjvBtI8r6ObT4NoApHnw")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database('database.db')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_project_type = State()
    waiting_for_channel_info = State()
    waiting_for_bot_info = State()
    waiting_for_mini_app_info = State()
    waiting_for_theme = State()
    waiting_for_payment_method = State()
    waiting_for_complaint = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    welcome_text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä!

    1. –ò—â–∏ –ª—é–±—ã–µ –∫–∞–Ω–∞–ª—ã, –±–æ—Ç—ã –∏–ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω—É–∂–Ω–æ–π —Ç–µ–±–µ —Ç–µ–º–∞—Ç–∏–∫–µ.
    2. –ü–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫ –Ω–∞–º –∏ –ø–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫.
    3. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ —Ç–æ–ø.
    """
    await message.answer(welcome_text, reply_markup=kb.main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(text="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def main_page(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=kb.content_type_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda c: c.data in ['channels', 'bots', 'mini_apps'])
async def process_content_type(callback_query: types.CallbackQuery):
    content_type = callback_query.data
    if content_type == 'channels':
        themes = db.get_channel_themes()
    elif content_type == 'bots':
        themes = db.get_bot_themes()
    else:
        themes = ["–í—Å–µ –ø–æ–¥—Ä—è–¥"]  # –î–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É:",
        reply_markup=kb.generate_themes_menu(themes, content_type)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('theme_'))
async def process_theme(callback_query: types.CallbackQuery):
    _, content_type, theme = callback_query.data.split('_')
    items = db.get_items_by_theme(content_type, theme)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–º–∏—É–º –∏ –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    message_text = "üèÜ <b>–ü—Ä–µ–º–∏—É–º –º–µ—Å—Ç–æ:</b>\n\n"
    premium_item = next((item for item in items if item['is_premium']), None)
    
    if premium_item:
        message_text += f"‚ú® <b>{premium_item['name']}</b>\n"
        message_text += f"üìå –¢–µ–º–∞—Ç–∏–∫–∞: {premium_item['theme']}\n"
        message_text += f"üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç: {premium_item['popular_post']}\n"
        message_text += f"üîó –°—Å—ã–ª–∫–∞: {premium_item['link']}\n\n"
        message_text += f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {premium_item['likes']}\n\n"
    
    message_text += "<b>–î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n"
    
    for item in items[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if not item['is_premium']:
            message_text += f"üìå <b>{item['name']}</b>\n"
            message_text += f"üè∑ –¢–µ–º–∞—Ç–∏–∫–∞: {item['theme']}\n"
            message_text += f"üîó –°—Å—ã–ª–∫–∞: {item['link']}\n"
            message_text += f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {item['likes']}\n\n"
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        message_text,
        parse_mode='HTML',
        reply_markup=kb.items_list_keyboard(items, content_type)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ–µ–∫—Ç"
@dp.message_handler(text="–ú–æ–π –ø—Ä–æ–µ–∫—Ç")
async def my_project(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=kb.project_type_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
@dp.message_handler(state=Form.waiting_for_project_type)
async def process_project_type(message: types.Message, state: FSMContext):
    if message.text == '–ö–∞–Ω–∞–ª':
        await message.answer(
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await Form.waiting_for_channel_info.set()
    elif message.text == '–ë–æ—Ç':
        await message.answer(
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n"
            "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É —Ä–µ–∫–ª–∞–º—É)",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await Form.waiting_for_bot_info.set()
    elif message.text == '–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
        await message.answer(
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "2. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø–∏—à–∏—Ç–µ –∏—Ö",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await Form.waiting_for_mini_app_info.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@dp.message_handler(state=Form.waiting_for_channel_info)
async def process_channel_info(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞
    await state.update_data(project_type='channel', link=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞:", reply_markup=kb.themes_menu)
    await Form.waiting_for_theme.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.message_handler(state=Form.waiting_for_theme)
async def process_theme_selection(message: types.Message, state: FSMContext):
    await state.update_data(theme=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:",
        reply_markup=kb.payment_method_menu
    )
    await Form.waiting_for_payment_method.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=Form.waiting_for_payment_method)
async def process_payment_method(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π)':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥
        stars = db.get_user_stars(message.from_user.id)
        if stars >= 10:
            db.add_project(
                user_id=message.from_user.id,
                project_type=user_data['project_type'],
                link=user_data['link'],
                theme=user_data['theme'],
                is_premium=True,
                stars_cost=10
            )
            db.update_user_stars(message.from_user.id, -10)
            await message.answer(
                "–í–∞—à –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º-—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ!",
                reply_markup=kb.main_menu
            )
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø—Ä–µ–º–∏—É–º-—Ä–∞–∑–º–µ—â–µ–Ω–∏—è. "
                "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–≤–µ–∑–¥—ã.",
                reply_markup=kb.main_menu
            )
    elif message.text == '–ü–ª–∞—Ç–Ω–æ':
        await message.answer(
            "–û–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: [payment_link]\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=kb.main_menu
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–Ω–µ—Ä AdGram"
@dp.message_handler(text="–ë–∞–Ω–µ—Ä AdGram")
async def adgram_banner(message: types.Message):
    tasks = db.get_available_tasks(message.from_user.id)
    if tasks:
        await message.answer(
            "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã:",
            reply_markup=kb.tasks_keyboard()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    

@dp.message_handler(text="–õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
async def personal_profile(message: types.Message):
    user_info = db.get_user_info(message.from_user.id)
    if user_info:
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"‚≠ê –ó–≤–µ–∑–¥—ã: {user_info['stars']}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info['balance']} —Ä—É–±.\n"
            f"üìä –ü—Ä–æ–µ–∫—Ç–æ–≤: {user_info['projects_count']}",
            reply_markup=kb.profile_menu()
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith("task_"))
async def process_task(callback_query: types.CallbackQuery):
    task_type = callback_query.data.split("_")[1]
    db.complete_task(callback_query.from_user.id, task_type)
    await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {'5' if task_type == 'banner' else '3' if task_type == 'subscribe' else '10'}üåü!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('like_'))
async def process_like(callback_query: types.CallbackQuery):
    _, item_id = callback_query.data.split('_')
    db.add_like(item_id)
    await bot.answer_callback_query(callback_query.id, "‚ù§Ô∏è –í–∞—à –ª–∞–π–∫ —É—á—Ç—ë–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±
@dp.callback_query_handler(lambda c: c.data.startswith('report_'))
async def process_report(callback_query: types.CallbackQuery):
    _, item_id = callback_query.data.split('_')
    await bot.send_message(
        callback_query.from_user.id,
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await Form.waiting_for_complaint.set()
    await state.update_data(item_id=item_id)

@dp.message_handler(text="–ö–∞–Ω–∞–ª")
async def adgram_banner(message: types.Message):
    chanals = db.get_available_chanals(message.from_user.id)
    if chanals:
        await message.answer(
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã",
            reply_markup=kb.chanals_keyboard()
        )
    else:
        await message.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤")
    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)